import os
import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

TOKEN = os.getenv("BOT_TOKEN") or "7650633591:AAFJFvsTfXSEKdNYRjmjv-24P0HO_9AyfKw"
OWNER_ID = 6295626651  # ‡§Ü‡§™‡§ï‡§æ Telegram ID

APPROVED_USERS_FILE = "approved_users.json"

# Approved users ‡§ï‡•ã load/save ‡§ï‡§∞‡§®‡•á ‡§ï‡•á functions
def load_approved_users():
    if not os.path.exists(APPROVED_USERS_FILE):
        return []
    with open(APPROVED_USERS_FILE, "r") as f:
        return json.load(f)

def save_approved_users(users):
    with open(APPROVED_USERS_FILE, "w") as f:
        json.dump(users, f)

approved_users = load_approved_users()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id != OWNER_ID and user_id not in approved_users:
        await update.message.reply_text(
            "üîí ‡§Ø‡§π ‡§¨‡•â‡§ü ‡§∏‡§¨‡§ï‡•á ‡§≤‡§ø‡§è ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§\n‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§ï‡•á ‡§≤‡§ø‡§è Owner ‡§∏‡•á ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§ï‡§∞‡•á‡§Ç‡•§"
        )
        await context.bot.send_message(
            chat_id=OWNER_ID,
            text=f"üîî User @{update.effective_user.username or 'NoUsername'} (ID: {user_id}) permission ‡§Æ‡§æ‡§Ç‡§ó ‡§∞‡§π‡§æ ‡§π‡•à‡•§\n\n‡§â‡§∏‡•á free access ‡§¶‡•á‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è /approve {user_id} ‡§≠‡•á‡§ú‡•á‡§Ç‡•§"
        )
        return

    await update.message.reply_text(
        "üìö Welcome to StudyBot!\n\nUse /help to see available commands."
    )

async def approve(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != OWNER_ID:
        return

    if context.args:
        try:
            user_id = int(context.args[0])
            if user_id not in approved_users:
                approved_users.append(user_id)
                save_approved_users(approved_users)
                await update.message.reply_text(f"‚úÖ User {user_id} ‡§ï‡•ã access ‡§¶‡•á ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ‡•§")
                await context.bot.send_message(chat_id=user_id, text="üéâ ‡§Ü‡§™‡§ï‡•ã ‡§¨‡•â‡§ü ‡§ï‡•Ä access ‡§Æ‡§ø‡§≤ ‡§ó‡§à ‡§π‡•à!")
            else:
                await update.message.reply_text("‚ÑπÔ∏è User ‡§™‡§π‡§≤‡•á ‡§∏‡•á approved ‡§π‡•à‡•§")
        except:
            await update.message.reply_text("‚ùå Invalid user ID.")
    else:
        await update.message.reply_text("‚ùó Usage: /approve <user_id>")

async def buy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üí∞ Premium access ‡§ï‡•á ‡§≤‡§ø‡§è ‚Çπ99 UPI ‡§ï‡§∞‡•á‡§Ç: 9528165371@amazonpay")

async def subjects(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìö ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§µ‡§ø‡§∑‡§Ø:\n- ‡§π‡§ø‡§Ç‡§¶‡•Ä\n- ‡§ó‡§£‡§ø‡§§\n- ‡§µ‡§ø‡§ú‡•ç‡§û‡§æ‡§®\n- ‡§á‡§§‡§ø‡§π‡§æ‡§∏")

async def notes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìí ‡§Ö‡§≠‡•Ä ‡§®‡•ã‡§ü‡•ç‡§∏ ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§ø‡§è ‡§ú‡§æ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç‡•§ ‡§ú‡§≤‡•ç‡§¶ ‡§Ü ‡§∞‡§π‡•á ‡§π‡•à‡§Ç!")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("""
ü§ñ Available Commands:
/start - ‡§¨‡•â‡§ü ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç
/buy - ‡§™‡•ç‡§∞‡•Ä‡§Æ‡§ø‡§Ø‡§Æ ‡§ñ‡§∞‡•Ä‡§¶‡•á‡§Ç
/subjects - ‡§µ‡§ø‡§∑‡§Ø ‡§∏‡•Ç‡§ö‡•Ä
/notes - ‡§®‡•ã‡§ü‡•ç‡§∏ ‡§¶‡•á‡§ñ‡•á‡§Ç
/approve <user_id> - (Owner only)
""")

def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("buy", buy))
    app.add_handler(CommandHandler("subjects", subjects))
    app.add_handler(CommandHandler("notes", notes))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("approve", approve))
    app.run_polling()

if __name__ == "__main__":
    main()

 
